// Tencent is pleased to support the open source community by making ncnn available.
//
// Copyright (C) 2019 THL A29 Limited, a Tencent company. All rights reserved.
//
// Licensed under the BSD 3-Clause License (the "License"); you may not use this file except
// in compliance with the License. You may obtain a copy of the License at
//
// https://opensource.org/licenses/BSD-3-Clause
//
// Unless required by applicable law or agreed to in writing, software distributed
// under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

#version 450

#if NCNN_fp16_storage
#extension GL_EXT_shader_16bit_storage: require
#endif
#if NCNN_fp16_arithmetic
#extension GL_EXT_shader_explicit_arithmetic_types_float16: require
#endif

#extension GL_GOOGLE_include_directive: enable
#include "vulkan_activation.comp"

#define LOCAL_MEMORY_UNROLL_INCH 8

layout (constant_id = 0) const int kernel_w = 1;
layout (constant_id = 1) const int dilation_w = 1;
layout (constant_id = 2) const int stride_w = 1;
layout (constant_id = 3) const int bias_term = 0;
layout (constant_id = 4) const int activation_type = 0;
layout (constant_id = 5) const float activation_param_0 = 0;
layout (constant_id = 6) const float activation_param_1 = 0;

#define shape_constant_id_offset 7
layout (constant_id = shape_constant_id_offset + 0) const int dims = 0;
layout (constant_id = shape_constant_id_offset + 1) const int w = 0;
layout (constant_id = shape_constant_id_offset + 2) const int h = 0;
layout (constant_id = shape_constant_id_offset + 3) const int c = 0;
layout (constant_id = shape_constant_id_offset + 4) const int cstep = 0;

layout (constant_id = shape_constant_id_offset + 5) const int outdims = 0;
layout (constant_id = shape_constant_id_offset + 6) const int outw = 0;
layout (constant_id = shape_constant_id_offset + 7) const int outh = 0;
layout (constant_id = shape_constant_id_offset + 8) const int outc = 0;
layout (constant_id = shape_constant_id_offset + 9) const int outcstep = 0;

layout (binding = 0) readonly buffer bottom_blob { sfpvec4 bottom_blob_data[]; };
layout (binding = 1) writeonly buffer top_blob { sfpvec4 top_blob_data[]; };
#if NCNN_fp16_packed || (NCNN_fp16_storage && !NCNN_fp16_arithmetic)
    // GL_EXT_shader_16bit_storage does not define f16mat4 type :(
    layout (binding = 2) readonly buffer weight_blob { sfpvec4 weight_data[]; };
#else
    layout (binding = 2) readonly buffer weight_blob { sfpmat4 weight_data[]; };
#endif
layout (binding = 3) readonly buffer bias_blob { sfpvec4 bias_data[]; };

layout (push_constant) uniform parameter
{
    int dims;
    int w;
    int h;
    int c;
    int cstep;

    int outdims;
    int outw;
    int outh;
    int outc;
    int outcstep;
} p;

shared lfpvec4 tmp_v[8][LOCAL_MEMORY_UNROLL_INCH][4];
shared lfpvec4 tmp_k[8][LOCAL_MEMORY_UNROLL_INCH][4];

void main()
{
    int gx = int(gl_GlobalInvocationID.x) * 4; // input index
    int gy = int(gl_GlobalInvocationID.y); // channel index

    const int outside = psc(outw);
    if (gx >= outside)
        return;

    afpvec4 sum0;
    afpvec4 sum1;
    afpvec4 sum2;
    afpvec4 sum3;

    if (bias_term == 1)
    {
        sum0 = buffer_ld4(bias_data, gy);
        sum1 = sum0;
        sum2 = sum0;
        sum3 = sum0;
    }
    else
    {
        sum0 = afpvec4(0.f);
        sum1 = afpvec4(0.f);
        sum2 = afpvec4(0.f);
        sum3 = afpvec4(0.f);
    }

    const int N = psc(h) * kernel_w;

    const ivec4 gx4 = gx + ivec4(0, 1, 2, 3);
    const ivec4 sx4 = gx4 % outside;
    const ivec4 sxs4 = sx4 * stride_w;

    const int lx = int(gl_LocalInvocationID.x);
    const int ly = int(gl_LocalInvocationID.y);

    int w_offset = gy * N * 4;

    for (int z = 0; z < N; z += LOCAL_MEMORY_UNROLL_INCH)
    //int z = 0;
    {
        const int step = min(LOCAL_MEMORY_UNROLL_INCH, N - z);

        if (ly < 4)
        {
            for (int z4 = 0; z4 < step; z4++)
            {
                const int sz = (z + z4) / kernel_w;
                const int k = (z + z4) % kernel_w;

                const int v_offset = sz * psc(w) + sxs4[ly] + k * dilation_w;

                tmp_v[lx][z4][ly] = sfp2lfpvec4(bottom_blob_data[v_offset]);
            }
        }

        if (lx < 4)
        {
            for (int z4 = 0; z4 < step; z4++)
            {
                tmp_k[ly][z4][lx] = sfp2lfpvec4(
                                        weight_data[w_offset + z4 * 4 + lx]);
            }
        }

        barrier();

        for (int z4 = 0; z4 < step; z4++)
        //int z4 = 0;
        {
            afpvec4 v0 = lfp2afpvec4(tmp_v[lx][z4][0]);
            afpvec4 v1 = lfp2afpvec4(tmp_v[lx][z4][1]);
            afpvec4 v2 = lfp2afpvec4(tmp_v[lx][z4][2]);
            afpvec4 v3 = lfp2afpvec4(tmp_v[lx][z4][3]);

            afpvec4 k0 = lfp2afpvec4(tmp_k[ly][z4][0]);
            afpvec4 k1 = lfp2afpvec4(tmp_k[ly][z4][1]);
            afpvec4 k2 = lfp2afpvec4(tmp_k[ly][z4][2]);
            afpvec4 k3 = lfp2afpvec4(tmp_k[ly][z4][3]);

            afpmat4 k = afpmat4(k0, k1, k2, k3);

            sum0 += v0 * k;
            sum1 += v1 * k;
            sum2 += v2 * k;
            sum3 += v3 * k;

            //sum0 = v0;
            //sum1 = k0;
            //sum2 = v2;
            //sum3 = v3;
        }

        w_offset += step * 4;

        barrier();
    }

    sum0 = activation_afpvec4(sum0, activation_type, activation_param_0, activation_param_1);
    sum1 = activation_afpvec4(sum1, activation_type, activation_param_0, activation_param_1);
    sum2 = activation_afpvec4(sum2, activation_type, activation_param_0, activation_param_1);
    sum3 = activation_afpvec4(sum3, activation_type, activation_param_0, activation_param_1);

    const int gi = gy * outside + gx;

    buffer_st4(top_blob_data, gi, sum0);
    if (gx + 1 < outside) buffer_st4(top_blob_data, gi + 1, sum1);
    if (gy + 2 < outside) buffer_st4(top_blob_data, gi + 2, sum2);
    if (gy + 3 < outside) buffer_st4(top_blob_data, gi + 3, sum3);
}
